import React, { useEffect, useRef, useState } from 'react';
import { Avatar, Button, Card, Input, message, Spin } from 'antd';
import {
    CloseOutlined,
    MessageOutlined,
    RobotOutlined,
    SendOutlined,
    WechatOutlined,
} from '@ant-design/icons';
import styles from './ChatBot.module.scss';

const { TextArea } = Input;

interface Message {
    id: string;
    role: 'USER' | 'ASSISTANT';
    content: string;
    timestamp: string;
}

const ChatBot: React.FC = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState<Message[]>([]);
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const messagesContainerRef = useRef<HTMLDivElement>(null);

    const quickActions = [
        { emoji: 'üçÉ', text: 'T∆∞ v·∫•n lo·∫°i tr√†' },
        { emoji: 'üì¶', text: 'Ki·ªÉm tra ƒë∆°n h√†ng' },
        { emoji: '‚òï', text: 'C√°ch pha tr√†' },
        { emoji: 'üéÅ', text: 'Khuy·∫øn m√£i' },
    ];

    const scrollToBottom = () => {
        if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop =
                messagesContainerRef.current.scrollHeight;
        }
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages, isTyping]);

    // Test scroll with sample messages when opening chatbot
    useEffect(() => {
        if (isOpen && messages.length === 0) {
            // Add some sample messages to test scrolling - v·ªÅ tr√† thay v√¨ qu·∫ßn √°o
            const sampleMessages: Message[] = [
                {
                    id: 'welcome',
                    role: 'ASSISTANT',
                    content:
                        'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa SomaTea üçÉ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c lo·∫°i tr√† cao c·∫•p, t∆∞ v·∫•n c√°ch pha tr√†, v√† h·ªó tr·ª£ ƒë·∫∑t h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
                    timestamp: new Date().toLocaleTimeString('vi-VN', {
                        hour: '2-digit',
                        minute: '2-digit',
                    }),
                },
            ];

            setTimeout(() => {
                setMessages(sampleMessages);
            }, 500);
        }
    }, [isOpen]);

    const sendMessage = async (content: string) => {
        if (!content.trim()) return;

        const userMessage: Message = {
            id: `user-${Date.now()}`,
            role: 'USER',
            content: content.trim(),
            timestamp: new Date().toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit',
            }),
        };

        setMessages((prev) => [...prev, userMessage]);
        setInputValue('');
        setIsLoading(true);
        setIsTyping(true);

        try {
            const response = await fetch('/api/chatbot/message', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: content }),
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            // Simulate typing delay
            setTimeout(() => {
                setIsTyping(false);
                const assistantMessage: Message = {
                    id: `assistant-${Date.now()}`,
                    role: 'ASSISTANT',
                    content:
                        data.response ||
                        'Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.',
                    timestamp: new Date().toLocaleTimeString('vi-VN', {
                        hour: '2-digit',
                        minute: '2-digit',
                    }),
                };
                setMessages((prev) => [...prev, assistantMessage]);
            }, 1000);
        } catch (error) {
            console.error('Error:', error);
            setIsTyping(false);
            message.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn', 3);
        } finally {
            setIsLoading(false);
        }
    };

    const handleSend = () => {
        sendMessage(inputValue);
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    const handleQuickAction = (actionText: string) => {
        sendMessage(actionText);
    };

    const formatTime = (timestamp: string) => {
        return timestamp;
    };

    return (
        <>
            {/* Chat Toggle Button */}
            <div className={styles.chatToggle}>
                <Button
                    className={styles.toggleButton}
                    icon={isOpen ? <CloseOutlined /> : <MessageOutlined />}
                    onClick={() => setIsOpen(!isOpen)}
                    shape="circle"
                    size="large"
                />
            </div>

            {/* Chat Window */}
            {isOpen && (
                <div className={styles.chatWindow}>
                    <Card className={styles.chatCard}>
                        {/* Header */}
                        <div className={styles.chatHeader}>
                            <div className={styles.headerContent}>
                                <div className={styles.headerInfo}>
                                    <Avatar
                                        className={styles.botAvatar}
                                        icon={<RobotOutlined />}
                                        size={48}
                                    />
                                    <div className={styles.botInfo}>
                                        <h3>AI Assistant</h3>
                                        <div className={styles.status}>
                                            <div className={styles.statusDot} />
                                            <span>ƒêang ho·∫°t ƒë·ªông</span>
                                        </div>
                                    </div>
                                </div>
                                <button
                                    className={styles.closeButton}
                                    onClick={() => setIsOpen(false)}
                                >
                                    <CloseOutlined />
                                </button>
                            </div>
                        </div>

                        {/* Messages Container */}
                        <div
                            className={styles.messagesContainer}
                            ref={messagesContainerRef}
                        >
                            <div className={styles.messagesContent}>
                                {isLoading && messages.length === 0 ? (
                                    <div className={styles.loadingContainer}>
                                        <Spin size="large" />
                                        <div className={styles.loadingText}>
                                            ƒêang kh·ªüi t·∫°o tr·ª£ l√Ω AI...
                                        </div>
                                    </div>
                                ) : (
                                    <>
                                        {/* Welcome Message */}
                                        {messages.length === 0 && (
                                            <div
                                                className={
                                                    styles.welcomeMessage
                                                }
                                            >
                                                <WechatOutlined
                                                    className={
                                                        styles.welcomeIcon
                                                    }
                                                />
                                                <h3>
                                                    Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI
                                                </h3>
                                                <p>
                                                    T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n
                                                    ph·∫©m, ki·ªÉm tra ƒë∆°n h√†ng, v√†
                                                    tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi v·ªÅ d·ªãch
                                                    v·ª• c·ªßa ch√∫ng t√¥i.
                                                </p>
                                            </div>
                                        )}

                                        {/* Messages */}
                                        {messages.map((msg) => (
                                            <div
                                                className={`${styles.messageWrapper} ${
                                                    msg.role === 'USER'
                                                        ? styles.userMessage
                                                        : styles.assistantMessage
                                                }`}
                                                key={msg.id}
                                            >
                                                {msg.role === 'ASSISTANT' && (
                                                    <div
                                                        className={
                                                            styles.messageContent
                                                        }
                                                    >
                                                        <Avatar
                                                            className={
                                                                styles.messageAvatar
                                                            }
                                                            icon={
                                                                <RobotOutlined />
                                                            }
                                                            size={32}
                                                        />
                                                        <div
                                                            className={
                                                                styles.messageBubble
                                                            }
                                                        >
                                                            <div
                                                                className={
                                                                    styles.messageText
                                                                }
                                                            >
                                                                {msg.content}
                                                            </div>
                                                            <div
                                                                className={
                                                                    styles.messageTime
                                                                }
                                                            >
                                                                {formatTime(
                                                                    msg.timestamp
                                                                )}
                                                            </div>
                                                        </div>
                                                    </div>
                                                )}

                                                {msg.role === 'USER' && (
                                                    <div
                                                        className={
                                                            styles.messageBubble
                                                        }
                                                    >
                                                        <div
                                                            className={
                                                                styles.messageText
                                                            }
                                                        >
                                                            {msg.content}
                                                        </div>
                                                        <div
                                                            className={
                                                                styles.messageTime
                                                            }
                                                        >
                                                            {formatTime(
                                                                msg.timestamp
                                                            )}
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        ))}

                                        {/* Typing Indicator */}
                                        {isTyping && (
                                            <div
                                                className={`${styles.messageWrapper} ${styles.assistantMessage}`}
                                            >
                                                <div
                                                    className={
                                                        styles.messageContent
                                                    }
                                                >
                                                    <Avatar
                                                        className={
                                                            styles.messageAvatar
                                                        }
                                                        icon={<RobotOutlined />}
                                                        size={32}
                                                    />
                                                    <div
                                                        className={
                                                            styles.typingIndicator
                                                        }
                                                    >
                                                        <div
                                                            className={
                                                                styles.typingDots
                                                            }
                                                        >
                                                            <div
                                                                className={
                                                                    styles.dot
                                                                }
                                                            />
                                                            <div
                                                                className={
                                                                    styles.dot
                                                                }
                                                            />
                                                            <div
                                                                className={
                                                                    styles.dot
                                                                }
                                                            />
                                                        </div>
                                                        <span
                                                            className={
                                                                styles.typingText
                                                            }
                                                        >
                                                            AI ƒëang so·∫°n tin
                                                            nh·∫Øn...
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        <div ref={messagesEndRef} />
                                    </>
                                )}
                            </div>
                        </div>

                        {/* Quick Actions */}
                        {messages.length === 0 && !isLoading && (
                            <div className={styles.quickActions}>
                                <div className={styles.quickTitle}>
                                    G·ª£i √Ω c√¢u h·ªèi
                                </div>
                                <div className={styles.actionButtons}>
                                    {quickActions.map((action, index) => (
                                        <button
                                            className={styles.actionButton}
                                            key={`action-${index}`}
                                            onClick={() =>
                                                handleQuickAction(action.text)
                                            }
                                        >
                                            {action.emoji} {action.text}
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Input Area */}
                        <div className={styles.inputArea}>
                            <div className={styles.inputWrapper}>
                                <TextArea
                                    autoSize={{ minRows: 1, maxRows: 4 }}
                                    className={styles.messageInput}
                                    disabled={isLoading}
                                    onChange={(e) =>
                                        setInputValue(e.target.value)
                                    }
                                    onKeyPress={handleKeyPress}
                                    placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                                    rows={1}
                                    value={inputValue}
                                />
                                <Button
                                    className={styles.sendButton}
                                    disabled={!inputValue.trim() || isLoading}
                                    icon={<SendOutlined />}
                                    loading={isLoading}
                                    onClick={handleSend}
                                    shape="circle"
                                />
                            </div>
                        </div>
                    </Card>
                </div>
            )}
        </>
    );
};

export default ChatBot;
